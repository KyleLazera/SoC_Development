#ifndef _XADC_H
#define _XADC_H

#include "io_rw.h"
#include "io_map.h"

/*************** Macros ***********/
#define ADC_0_REG			0b10110
#define ADC_1_REG			0b11110
#define ADC_2_REG			0b10111
#define ADC_3_REG			0b11111
#define TEMP_REG			0b00000
#define VCC_REG				0b00001
#define FLAG_REG			0b00010

#define BIPOLAR				0x0400
#define UNIPOLAR			0x0000

#define AUX_CHANNEL_0		(1UL << 0)


/*typedef enum{
	ADC_0_REG = 0,
	TMP_REG = 4,
	VCC_REG = 5
}XADC_REG;*/

typedef struct{
	uint32_t base_addr;
}xadc_handle_t;

/**
 * @brief Constructor to initialize the base address of the xadc core
 */
void xadc_init(xadc_handle_t* self, uint32_t core_base_addr);

/**
 * @brief Read raw data from the ADC reg
 * @param reg_offset - Determines which adc register to read from
 */
uint16_t read_raw(xadc_handle_t* self, int reg_offset);

/**
 * @brief Function used to write into teh config registers of the XADC
 * @param addr - the address to write to for the XADC
 * @param value - the value to write into the XADC
 */
void adc_write(xadc_handle_t* self, uint32_t addr, uint32_t value);

/**
 * @brief Used to set the mode (unipolar or bipolar)
 */
void adc_set_mode(xadc_handle_t* self, uint32_t mode);

/**
 * @brief Read the ADC input and convert to actual voltage using equation
 * @param reg_offset - Determines which adc register to read from
 */
double read_adc_in(xadc_handle_t* self, int reg_offset);

/**
 * @brief Read the vcc reading for the FPGA core
 */
double read_fpga_vcc(xadc_handle_t* self);

/**
 * @brief Read built in temp sensor on FPGA
 */
double read_fpga_temp(xadc_handle_t* self);

#endif	//_XADC_H
