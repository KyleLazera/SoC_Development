#include "uart.h"

/**************************************************
 * Helper/Private Functions
 **************************************************/

static void display_str(const char* str)
{
	while((uint8_t) *str){
		tx_byte(*str);
		str++;
	}
}


/***********************************************
 * Communication Functions
 ***********************************************/

void set_baud_rate(uart_handle_t* self, uint32_t baud_rate)
{
	//Calculate the dvsr value to write into the registers
	//Sys clk freq is 100MHz
	uint32_t dvsr = ((SYS_CLK_FREQ * 1000000)/(16 * baud_rate) - 1);
	io_write(self->base_reg, DVSR_REG, dvsr);
}

void uart_init(uart_handle_t* self, uint32_t core_base_addr)
{
	//Set the base address of the peripheral
	self->base_reg = core_base_addr;
	//Set default baud rate to 9600
	set_baud_rate(self, 9600);
}

int rx_fifo_empty(uart_handle_t* self)
{
	int empty_flag;
	//Read the value from the read register and use a bit mask to isolate desired bit
	empty_flag = (io_read(self->base_reg, READ_DATA_REG)) & RX_EMPTY_MASK;
	//bit shift to the right by 8
	empty_flag = empty_flag >> 8;
	return empty_flag;
}

int tx_fifo_full(uart_handle_t* self)
{
	int full_flag;
	//read the value from read register and use bit mask to isolate desired bit
	full_flag = (io_read(self->base_reg, READ_DATA_REG)) & TX_FULL_MASK;
	//Bit shift the value
	full_flag = full_flag >> 9;
	return full_flag;
}

void tx_byte(uart_handle_t* self, uint32_t tx_byte)
{
	//Wait until tx fifo is not full so we can write into it
	while(tx_fifo_full(self)){};
	//Once the fifo is not full, write the desired value in
	io_write(self->base_reg, WR_DATA_REG, tx_byte);
}

int rx_byte(uart_handle_t* self)
{
	uint32_t rd_data;

	//check if fifo is empty
	if(rx_fifo_empty(self))
		return -1;
	else
	{
		//Read from data reg and mask the desired bits
		rd_data = io_read(self->base_reg, READ_DATA_REG) & RX_DATA_MASK;
		//remove the read data from the fifo
		io_write(self->base_reg, RM_RD_DATA_REG, DUMMY_DATA);
		return rd_data;
	}
}

/*********************************************
 * Display Functions
 *********************************************/


