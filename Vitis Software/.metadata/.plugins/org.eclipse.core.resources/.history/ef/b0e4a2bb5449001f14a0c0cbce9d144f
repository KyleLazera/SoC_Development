


//Bit Masks
#define TIMER_GO			0x0000001
#define TIMER_CLR			0x0000002

//Holds the register values for the timer core
typedef enum{
	COUNTER_LOWER_REG = 0,			//Holds lower 32 bits
	COUNTER_UPPER_REG = 1,			//Upper 16 bits of counter
	CTRL_REG = 2					//Control Register
}Timer_Registers;

//Timer core handle
typedef struct{
	uint32_t base_addr;
	uint32_t ctrl_reg;
}Timer_Handle_t;

/******Functions*******/

/*
 * @brief Start the timer by writing the GO command to the control register
 */
void Timer_Init(Timer_Handle_t* self, uint32_t core_base_addr)
{
	self->base_addr = core_base_addr;
	self->ctrl_reg = TIMER_GO;
	io_write(self->base_addr, CTRL_REG, self->ctrl_reg);
}

/*
 * @brief Pause the timer by clearing the Go bit
 */
void Timer_Pause(Timer_Handle_t* self)
{
	io_write(self->base_addr, CTRL_REG, bit_clear(self->ctrl_reg, TIMER_GO));
}

/*
 * @brief Start the timer by setting the go bit
 */
void Timer_Go(Timer_Handle_t* self)
{
	io_write(self->base_addr, CTRL_REG, bit_set(self->ctrl_reg, TIMER_GO));
}

/*
 * @brief Clear the timer
 */
void Timer_Clear(Timer_Handle_t* self)
{
	//Write clear bit to generate a pulse
	io_write(self->base_addr, CTRL_REG, bit_set(self->ctrl_reg, TIMER_CLR));
}

/*
 * @brief Read from the timer
 */
uint64_t Timer_Read_Tick(Timer_Handle_t* self)
{
	uint32_t upper, lower;
	upper = io_read(self->base_addr, COUNTER_LOWER_REG);
	lower = io_read(self->base_addr, COUNTER_UPPER_REG);
	return ((upper << 32) | lower);
}

/*
 * @brief Returns the timer in microseconds
 */
uint64_t Timer_Read_Time(Timer_Handle_t* self)
{
	return (Timer_Read_Tick(self)/SYS_CLK_FREQ);
}

void Timer_Sleep(Timer_Handle_t* self, uint64_t time_us)
{
	uint64_t start_time, current_time;

	//get starting time
	start_time = Timer_Read_Time(self);

	do{
		current_time = Timer_Read_Time(self);
	} while((current_time - start_time) < time_us);
}

